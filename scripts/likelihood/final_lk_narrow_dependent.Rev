path = ""
data = readDiscreteCharacterData(path + "final_narrow_dataset.nex")

nSites <- data.nchar()

moves = VectorMoves()
monitors = VectorMonitors()

trees = readTrees(path + "ieo_hundred.nex", treetype="non-clock")


treetrace = treeTrace(trees)

#Tree distribution
psi ~ dnEmpiricalTree(treetrace)

moves.append( mvEmpiricalTree(psi, weight=2) )

#Chang A3 MAP tree
map_tree <- readBranchLengthTrees(path + "ChangA3.tree")[1]

#Hyperprior distributions
n_slow ~ dnUniform(3, 8)
moves.append( mvSlide(n_slow, delta=1.0, tune=true, weight=2.0) )
moves.append( mvSlide(n_slow, delta=0.1, tune=true, weight=2.0) )
moves.append( mvSlide(n_slow, delta=0.01, tune=true, weight=2.0) )


n_fast ~ dnUniform(9, 17)
moves.append( mvSlide(n_fast, delta=1.0, tune=true, weight=2.0) )
moves.append( mvSlide(n_fast, delta=0.1, tune=true, weight=2.0) )
moves.append( mvSlide(n_fast, delta=0.01, tune=true, weight=2.0) )


rate_pr_slow := psi.treeLength() / n_slow
rate_pr_fast := psi.treeLength() / n_fast

#Gain of indefinite article with no definite article
rate_00_01 ~ dnExponential(rate_pr_slow)

#Gain of definite article with no indefinite article
rate_00_10 ~ dnExponential(rate_pr_fast)

#Gain of definite article with an indefinite article
rate_01_11 ~ dnExponential(rate_pr_slow)

#Gain of indefinite article with a definite article
rate_10_11 ~ dnExponential(rate_pr_fast)


moves.append( mvScale( rate_00_01, lambda=1, tune=true, weight=2 ) )
moves.append( mvScale( rate_00_10, lambda=1, tune=true, weight=2 ) )
moves.append( mvScale( rate_01_11, lambda=1, tune=true, weight=2 ) )
moves.append( mvScale( rate_10_11, lambda=1, tune=true, weight=2 ) )

moves.append( mvScale( rate_00_01, lambda=0.1, tune=true, weight=2 ) )
moves.append( mvScale( rate_00_10, lambda=0.1, tune=true, weight=2 ) )
moves.append( mvScale( rate_01_11, lambda=0.1, tune=true, weight=2 ) )
moves.append( mvScale( rate_10_11, lambda=0.1, tune=true, weight=2 ) )

moves.append( mvScale( rate_00_01, lambda=0.01, tune=true, weight=2 ) )
moves.append( mvScale( rate_00_10, lambda=0.01, tune=true, weight=2 ) )
moves.append( mvScale( rate_01_11, lambda=0.01, tune=true, weight=2 ) )
moves.append( mvScale( rate_10_11, lambda=0.01, tune=true, weight=2 ) )



rates := [ [ 0.0, rate_00_10 , rate_00_01 , 0.0 ],
           [ 0.0 , 0.0, 0.0, rate_10_11  ],
           [ 0.0 , 0.0, 0.0, rate_01_11  ], 
           [ 0.0, 0.0 , 0.0 , 0.0 ] ]

#Rate matrix
Q := fnFreeK( rates , rescaled=false ) 


#Root frequencies
rf <- [1.0, 0.0, 0.0, 0.0]



phyMorph ~ dnPhyloCTMC(tree=psi, Q=Q, rootFrequencies=rf, type="Standard", nSites=1) 

phyMorph.clamp(data)


mymodel = model (Q)


####################################
##### Power-posterior analysis #####
####################################


pow_p = powerPosterior(mymodel, moves, monitors, "output/final_lk_narrow_dependent_powp.out", cats=127, sampleFreq=10)
pow_p.burnin(generations=2000,tuningInterval=200)
pow_p.run(generations=10000)


###################################
#### Stepping-stone analysis ######
###################################

ss = steppingStoneSampler(file="output/final_lk_narrow_dependent_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
write("Stepping stone marginal likelihood:\t", ss.marginal() )

ps = pathSampler(file="output/final_lk_narrow_dependent_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
write("Path-sampling marginal likelihood:\t", ps.marginal() )

